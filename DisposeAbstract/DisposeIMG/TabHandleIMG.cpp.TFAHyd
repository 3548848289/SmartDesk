#include "include/TabHandleIMG.h"
#include <QHBoxLayout>

TabHandleIMG::TabHandleIMG(const QString& filePath, QWidget *parent)
    : TabAbstract(filePath, parent), angle(0), scaleValue(0.5), shearValue(0), translateValue(0)
{
    QSplitter* splitter = new QSplitter(Qt::Vertical, this);

    scene = new QGraphicsScene;
    scene->setSceneRect(-100, -100, 200, 200);

    QPixmap *pixmap = new QPixmap(filePath);
    pixItem = new PixItem(pixmap);
    scene->addItem(pixItem);
    pixItem->setPos(0, 0);

    view = new QGraphicsView;
    view->setScene(scene);
    view->setMinimumSize(200, 200);
    view->installEventFilter(this);

    ControlFrame *controlFrame = new ControlFrame(this);

    splitter->addWidget(view);
    splitter->addWidget(controlFrame);

    splitter->setSizes({400, 100});

    QVBoxLayout* layout = new QVBoxLayout(this);
    layout->addWidget(splitter);
    setLayout(layout);

    setWindowTitle(tr("Graphics Item Transformation"));
    showControlFrame(controlFrame);

    connect(controlFrame, &ControlFrame::textAdded, this, &TabHandleIMG::onTextAdded);
    connect(controlFrame, &ControlFrame::exportRequested, this, &TabHandleIMG::exportImage);

}


// void TabHandleIMG::addTextToImage(const QString &text, const QPointF &position) {
//     textItem = new QGraphicsTextItem(text);
//     QFont font = textItem->font();
//     font.setPointSize(16);
//     textItem->setFont(font);
//     textItem->setPos(position);
//     scene->addItem(textItem);

// }

void TabHandleIMG::onTextAdded(const QString &text, const QPointF &position) {
    addTextToImage(text, position);
}

void TabHandleIMG::showControlFrame(ControlFrame *controlFrame)
{
        connect(controlFrame, &ControlFrame::rotateChanged, this, [=](int value) {
            angle = value;
            updateTransformations(value, scaleValue, shearValue, translateValue);
        });
        connect(controlFrame, &ControlFrame::scaleChanged, this, [=](int value) {
            scaleValue = value / 10.0;
            updateTransformations(angle, scaleValue, shearValue, translateValue);
        });
        connect(controlFrame, &ControlFrame::shearChanged, this, [=](int value) {
            shearValue = value / 10.0;
            updateTransformations(angle, scaleValue, shearValue, translateValue);
        });
        connect(controlFrame, &ControlFrame::translateChanged, this, [=](int value) {
            translateValue = value;
            updateTransformations(angle, scaleValue, shearValue, translateValue);
        });
}

void TabHandleIMG::updateTransformations(int angle, qreal scale, qreal shear, qreal translate)
{
    view->resetTransform();
    view->rotate(angle);
    view->scale(scale, scale);
    view->shear(shear, 0);
    view->translate(translate, translate);
}

void TabHandleIMG::addTextToImage(const QString &text, const QPointF &position) {
    // 获取当前视图的变换矩阵
    QTransform currentTransform = view->transform();

    // 转换坐标为当前变换下的坐标
    QPointF transformedPos = currentTransform.inverted().map(position);

    // 创建文字项
    textItem = new QGraphicsTextItem(text);
    QFont font = textItem->font();
    font.setPointSize(16);
    textItem->setFont(font);
    textItem->setPos(transformedPos);
    scene->addItem(textItem);
}

bool TabHandleIMG::eventFilter(QObject* watched, QEvent* event)
{
    if (watched == view && event->type() == QEvent::MouseButtonPress) {
        QMouseEvent* mouseEvent = static_cast<QMouseEvent*>(event);

        if (mouseEvent->button() == Qt::LeftButton) {
            QPointF scenePos = view->mapToScene(mouseEvent->pos());
            bool ok;
            QString text = QInputDialog::getText(this, tr("输入文字"), tr("请输入水印文字:"), QLineEdit::Normal, "", &ok);
            if (ok && !text.isEmpty()) {
                addTextToImage(text, scenePos);
            }
            return true;
        }
    }
    return QWidget::eventFilter(watched, event);
}



// void TabHandleIMG::exportImage(const QString &filePath) {
//     // 获取场景的边界，扩展到包含所有图形项
//     QRectF sceneRect = scene->sceneRect();
//     QRectF itemsRect = scene->itemsBoundingRect(); // 获取所有图形项的边界
//     sceneRect = sceneRect.united(itemsRect);  // 合并场景区域和项的边界

//     // 创建 QImage 来保存场景内容
//     QImage image(sceneRect.width(), sceneRect.height(), QImage::Format_ARGB32);
//     image.fill(Qt::white);  // 填充背景色为白色

//     // 创建 QPainter 对象并设置渲染区域
//     QPainter painter(&image);
//     QTransform transform;
//     transform.translate(-sceneRect.left(), -sceneRect.top());  // 平移到场景的起点
//     painter.setTransform(transform);

//     // 如果有视图，考虑视图的缩放比例
//     if (!scene->views().isEmpty()) {
//         QGraphicsView *view = scene->views().first();  // 获取第一个视图
//         QTransform viewTransform = view->transform();
//         painter.scale(viewTransform.m11(), viewTransform.m22());  // 按视图缩放渲染
//     }

//     // 渲染整个场景
//     scene->render(&painter, QRectF(), sceneRect);

//     // 保存图像
//     if (!image.isNull()) {
//         if (!image.save(filePath)) {
//             QMessageBox::warning(this, tr("Export Error"), tr("Failed to export image."));
//         } else {
//             QMessageBox::information(this, tr("Export Success"), tr("Image successfully exported."));
//         }
//     } else {
//         QMessageBox::warning(this, tr("Export Error"), tr("Image is not loaded or invalid."));
//     }
// }

void TabHandleIMG::exportImage(const QString &filePath) {
    // 获取视图中显示的矩形（视口区域）在场景中的坐标
    QRectF viewRect = view->mapToScene(view->viewport()->rect()).boundingRect();

    // 创建一个QImage，大小为视图显示内容的大小
    QImage image(viewRect.size().toSize(), QImage::Format_ARGB32);
    image.fill(Qt::white); // 可选：背景填充白色

    // 创建QPainter绘制在QImage上
    QPainter painter(&image);

    // 平移Painter到场景的显示区域
    painter.translate(-viewRect.topLeft());

    // 应用视图的变换矩阵
    painter.setTransform(view->transform(), true);

    // 渲染场景内容到图像
    scene->render(&painter, QRectF(), viewRect);

    // 保存图像到指定路径
    if (image.save(filePath, "PNG")) {
        qDebug() << "Image exported successfully to" << filePath;
    } else {
        qDebug() << "Failed to export image to" << filePath;
    }
}
